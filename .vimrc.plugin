call denite#custom#map('insert', '<C-N>', '<denite:move_to_next_line>', 'noremap')
call denite#custom#map('insert', '<C-P>', '<denite:move_to_previous_line>', 'noremap')
call denite#custom#map('insert', '<C-{>', '<denite:enter_mode:normal>', 'noremap')

call denite#custom#alias('source', 'file/rec/git', 'file/rec')
call denite#custom#var('file/rec/git', 'command',
      \ ['git', 'ls-files', '-co', '--exclude-standard'])

call denite#custom#var('grep', 'command', ['rg'])
call denite#custom#var('grep', 'default_opts',
      \ ['--vimgrep', '--no-heading'])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', [])

call denite#custom#option('_', 'highlight_mode_insert', 'Search')
call denite#custom#option('_', 'direction', 'top')
call denite#custom#option('_', 'cursor_wrap', 'true')
call denite#custom#option('_', 'highlight_mode_normal', 'CursorLine')

nnoremap <silent> 'b :Denite buffer -mode=normal<CR>
nnoremap <silent> 'fr :Denite file_mru -mode=normal<CR>
nnoremap <silent> 'd :DeniteBufferDir file/rec/git file:new -buffer-name=files -mode=normal<CR>
nnoremap <silent> 'g :DeniteProjectDir file/rec/git -buffer-name=files -mode=insert<CR>
nnoremap <silent> 'ff :Denite file -buffer-name=files -mode=normal<CR>
nnoremap <silent> 'cs :Denite colorscheme -auto-preview -mode=normal<CR>
nnoremap <silent> 'rm :Denite rails:model -mode=insert<CR>
nnoremap <silent> 'rc :Denite rails:controller -mode=insert<CR>
nnoremap <silent> 'rv :Denite rails:view -mode=insert<CR>
nnoremap <silent> 'rh :Denite rails:helper -mode=insert<CR>
nnoremap <silent> 'rj :Denite rails:javascript -mode=insert<CR>
nnoremap <silent> 'rl :Denite rails:lib -mode=insert<CR>
nnoremap <silent> 'rp :Denite rails:spec -mode=insert<CR>
nnoremap <silent> 'rf :Denite rails:config -mode=insert<CR>
nnoremap <silent> 'rg :Denite rails:graphql -mode=insert<CR>
nnoremap <silent> 'rs :Denite rails:service -mode=insert<CR>
nnoremap <silent> 'o :Denite outline -vertical -winwidth=50<CR>
nnoremap <silent> 's :Denite grep -mode=normal<CR>
nnoremap <silent> 'h :Denite help<CR>
nnoremap <silent> ? :Denite line -mode=insert<CR>

" vim-go
let g:go_fmt_command = "goimports"
nnoremap <silent> 'gb :GoBuild<CR>
nnoremap <silent> 'gf :GoFmt<CR>

" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplcache.
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Use camel case completion.
let g:neocomplcache_enable_camel_case_completion = 1
" Use underbar completion.
let g:neocomplcache_enable_underbar_completion = 1
" Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplcache_dictionary_filetype_lists = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
\ }

" Define keyword.
if !exists('g:neocomplcache_keyword_patterns')
    let g:neocomplcache_keyword_patterns = {}
endif
let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
imap <C-k>     <Plug>(neocomplcache_snippets_expand)
smap <C-k>     <Plug>(neocomplcache_snippets_expand)
inoremap <expr><C-g>     neocomplcache#undo_completion()
inoremap <expr><C-l>     neocomplcache#complete_common_string()

" SuperTab like snippets behavior.
"imap <expr><TAB> neocomplcache#sources#snippets_complete#expandable() ? "\<Plug>(neocomplcache_snippets_expand)" : pumvisible() ? "\<C-n>" : "\<TAB>"

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <expr><CR>  neocomplcache#smart_close_popup() . "\<CR>"
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()

" AutoComplPop like behavior.
"let g:neocomplcache_enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplcache_enable_auto_select = 1
"let g:neocomplcache_disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"
"inoremap <expr><CR>  neocomplcache#smart_close_popup() . "\<CR>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplcache_omni_patterns')
  let g:neocomplcache_omni_patterns = {}
endif
let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
"autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplcache_omni_patterns.c = '\%(\.\|->\)\h\w*'
let g:neocomplcache_omni_patterns.cpp = '\h\w*\%(\.\|->\)\h\w*\|\h\w*::'

"Unite rails execute command
let g:unite_rails_execute_cmd = '!'

"vim-markdown
let g:vim_markdown_folding_disabled=1

augroup filetypedetect
  autocmd BufWinEnter,BufNewFile *_spec.rb set filetype=ruby.rspec
  autocmd BufWinEnter,BufNewFile *_ext.rb set filetype=ruby.ext
augroup END
